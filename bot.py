import os, asyncio, aiohttp, socket, unicodedata
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession  # —Å–µ—Å—Å–∏—è –ø–æ–¥ AioHTTP

# –∑–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ —Ä—è–¥–æ–º —Å bot.py)
load_dotenv()

API_BASE = os.getenv("BACKEND_URL", "http://localhost:5000")  # Flask base URL
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

dp = Dispatcher()
rt = Router()
dp.include_router(rt)

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏</b>, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ."
)

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----------
def main_kb() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
        ],
    )

# ---------- —É—Ç–∏–ª–∏—Ç—ã —Å–µ—Ç–∏/—Å–µ—Å—Å–∏–∏ ----------
def build_bot_session() -> AiohttpSession:
    """
    –ö—Ä–æ—Å—Å-–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞.
    ENV:
      TELEGRAM_PROXY_URL="socks5://user:pass@host:port" –∏–ª–∏ "http://host:port"
      FORCE_IPV4=1  (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    """
    proxy = (os.getenv("TELEGRAM_PROXY_URL") or "").strip() or None
    force_ipv4 = (os.getenv("FORCE_IPV4", "1").lower() not in ("0", "false", "no"))
    family = socket.AF_INET if force_ipv4 else socket.AF_UNSPEC
    connector = aiohttp.TCPConnector(family=family, ttl_dns_cache=60)
    try:
        return AiohttpSession(proxy=proxy, connector=connector)  # –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ aiogram
    except TypeError:
        return AiohttpSession(proxy=proxy)  # —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ aiogram (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ connector)

async def _http_json(method: str, url: str, *, json: dict | None = None, timeout: int = 10):
    try:
        async with aiohttp.ClientSession() as s:
            if method.upper() == "GET":
                async with s.get(url, timeout=timeout) as r:
                    return await r.json()
            else:
                async with s.post(url, json=json, timeout=timeout) as r:
                    return await r.json()
    except Exception:
        return None

# ---------- –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id ----------
_cache: dict[int, dict] = {}

def _cache_put(chat_id: int, user: dict):
    _cache[chat_id] = user or {}

def _cache_get(chat_id: int) -> dict | None:
    return _cache.get(chat_id)

# ---------- —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ----------
def _norm(s: str) -> str:
    if not s:
        return ""
    s = unicodedata.normalize("NFKC", s)
    s = s.replace("\u200d", "").replace("\ufe0f", "").replace("\u00a0", " ")
    return s.strip().lower()

def _is_profile_btn(t: str) -> bool:
    t = _norm(t)
    return "–ø—Ä–æ—Ñ–∏–ª—å" in t

def _is_notify_btn(t: str) -> bool:
    t = _norm(t)
    return "—É–≤–µ–¥–æ–º–ª–µ–Ω" in t  # –ø–æ–∫—Ä—ã–≤–∞–µ—Ç ¬´—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª

# ---------- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
def _fmt_profile_block(u: dict, *, show_name: bool = True) -> str:
    if not u:
        return ""
    lines = []
    name = u.get("display_name") or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if show_name:
        lines.append(f"<b>üë§ {name}</b>")
    if u.get("email"):
        lines.append(f"‚úâÔ∏è  {u['email']}")
    lvl = u.get("level")
    xp = u.get("xp")
    coins = u.get("coins")
    if lvl is not None and xp is not None:
        lines.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: <b>{lvl}</b> ¬∑ XP: <b>{xp}</b>")
    if coins is not None:
        lines.append(f"ü™ô –ú–æ–Ω–µ—Ç—ã: <b>{coins}</b>")
    if u.get("company"):
        lines.append(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{u['company']}</b>")
    return "\n".join(lines)

# ---------- API-—Ö–µ–ª–ø–µ—Ä—ã ----------
async def _whoami(chat_id: int):
    cid = str(chat_id)
    j = await _http_json("GET", f"{API_BASE}/api/telegram/bot/me?chat_id={cid}")
    if j and j.get("ok") and "linked" in j:
        return j
    j = await _http_json("POST", f"{API_BASE}/api/telegram/bot/me", json={"chat_id": cid})
    return j if (j and j.get("ok") and "linked" in j) else None

async def _last_notifications(chat_id: int, limit: int = 5):
    cid = str(chat_id)
    j = await _http_json("GET", f"{API_BASE}/api/telegram/bot/notifications?chat_id={cid}&limit={int(limit)}")
    if j and j.get("ok"):
        return j
    j = await _http_json("POST", f"{API_BASE}/api/telegram/bot/notifications", json={"chat_id": cid, "limit": int(limit)})
    return j if (j and j.get("ok")) else None

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ò –æ–±—ã—á–Ω—ã–π /start, –ò /start <payload>
@rt.message(CommandStart())
async def start(m: types.Message):
    text = (m.text or "").strip()
    payload = ""
    if " " in text:
        payload = text.split(" ", 1)[1].strip()

    # deep-link –∫–æ–¥ ‚Üí –ø—Ä–∏–≤—è–∑–∫–∞
    if payload and payload.isalnum() and 4 <= len(payload) <= 16:
        await _try_link_code(m, payload.upper())
        return

    who = await _whoami(m.chat.id)

    if who and who.get("linked"):
        user = who.get("user") or {}
        _cache_put(m.chat.id, user)
        name = user.get("display_name") or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        msg = f"<b>{name}</b>, –≤—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã.\n\n{_fmt_profile_block(user, show_name=False)}"
        await m.answer(msg, reply_markup=main_kb())
        return

    # —Ñ–æ–ª–±—ç–∫ –Ω–∞ –∫—ç—à ‚Äî –µ—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è
    cached = _cache_get(m.chat.id)
    if cached:
        name = cached.get("display_name") or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        msg = f"<b>{name}</b>, –≤—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã.\n\n{_fmt_profile_block(cached, show_name=False)}"
        await m.answer(msg, reply_markup=main_kb())
        return

    await m.answer(WELCOME, reply_markup=main_kb())

@rt.message(Command("me"))
async def cmd_me(m: types.Message):
    who = await _whoami(m.chat.id)
    if who and who.get("linked"):
        user = who.get("user") or {}
        _cache_put(m.chat.id, user)
        await m.answer(_fmt_profile_block(user), reply_markup=main_kb())
    else:
        await m.answer(
            "–ê–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.",
            reply_markup=main_kb()
        )

@rt.message(Command("notify"))
async def cmd_notify(m: types.Message):
    j = await _last_notifications(m.chat.id, limit=5)
    if not j or not j.get("ok"):
        cached = _cache_get(m.chat.id)
        if cached:
            await m.answer("–ü–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç ‚ú®", reply_markup=main_kb())
        else:
            await m.answer(
                "–ê–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.",
                reply_markup=main_kb()
            )
        return

    if not j.get("linked"):
        await m.answer(
            "–ê–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.",
            reply_markup=main_kb()
        )
        return

    items = j.get("items") or []
    if not items:
        await m.answer("–ü–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç ‚ú®", reply_markup=main_kb())
        return

    lines = ["<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>"]
    for n in items:
        dt = n.get("created_at", "")[:19].replace("T", " ")
        title = n.get("title") or "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        body = n.get("body") or ""
        lines.append(f"‚Ä¢ <b>{title}</b>\n  {body}\n  <i>{dt}</i>")
    await m.answer("\n\n".join(lines), reply_markup=main_kb())

async def _try_link_code(m: types.Message, code: str):
    payload = {"code": code, "chat_id": str(m.chat.id), "username": m.from_user.username or ""}
    j = await _http_json("POST", f"{API_BASE}/api/telegram/bot/link", json=payload)
    if not j:
        await m.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_kb())
        return

    if j.get("ok"):
        user = j.get("user") or {}
        if user:
            _cache_put(m.chat.id, user)

        who = await _whoami(m.chat.id)
        if who and who.get("linked"):
            user = who.get("user") or user
            _cache_put(m.chat.id, user)
            await m.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.\n\n" + _fmt_profile_block(user),
                reply_markup=main_kb()
            )
        else:
            await m.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.", reply_markup=main_kb())
    else:
        err = j.get("error") or "UNKNOWN"
        if err == "CODE_NOT_FOUND":
            await m.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ.", reply_markup=main_kb())
        elif err == "CODE_EXPIRED":
            await m.answer("‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ.", reply_markup=main_kb())
        else:
            await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_kb())

@rt.message(F.text.len() >= 4)
async def handle_code(m: types.Message):
    t = (m.text or "").strip()

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if t.startswith("/"):
        return

    # –∫–Ω–æ–ø–∫–∏ ‚Üí –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    if _is_profile_btn(t):
        await cmd_me(m)
        return
    if _is_notify_btn(t):
        await cmd_notify(m)
        return

    # —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    code = t.upper()
    if not (code.isascii() and code.isalnum() and 4 <= len(code) <= 16):
        await m.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã (4‚Äì16). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_kb())
        return

    await _try_link_code(m, code)

# ---------- –∑–∞–ø—É—Å–∫ ----------
async def main():
    token = BOT_TOKEN or ""
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω (env). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")

    # –ü—Ä–µ—Ñ–ª–∞–π—Ç: –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ DNS —Ö–æ—Ç—è –±—ã —Ä–µ–∑–æ–ª–≤–∏—Ç api.telegram.org
    loop = asyncio.get_running_loop()
    try:
        await loop.getaddrinfo("api.telegram.org", 443, type=socket.SOCK_STREAM, family=socket.AF_INET)
    except Exception as e:
        print("‚ùå DNS –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å api.telegram.org (IPv4).")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç/—Ñ–∞–π—Ä–≤–æ–ª/–ø—Ä–æ–∫—Å–∏. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å TELEGRAM_PROXY_URL –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π VPN.")
        print("   –î–µ—Ç–∞–ª–∏:", repr(e))

    session = build_bot_session()  # —Å–≤–æ—è —Å–µ—Å—Å–∏—è (IPv4/–ø—Ä–æ–∫—Å–∏)
    bot = Bot(token, default=DefaultBotProperties(parse_mode=ParseMode.HTML), session=session)

    print("Bot started (IPv4 forced; proxy:", os.getenv("TELEGRAM_PROXY_URL") or "none", ").")

    try:
        await dp.start_polling(bot)
    except Exception:
        print("‚ùå –ë–æ—Ç —É–ø–∞–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. –ß–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ api.telegram.org –∏–ª–∏ DNS.")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å TELEGRAM_PROXY_URL –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Å–µ—Ç—å/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞/DNS (8.8.8.8/1.1.1.1).")
        raise

if __name__ == "__main__":
    asyncio.run(main())
